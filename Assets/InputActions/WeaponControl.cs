//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/WeaponControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WeaponControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WeaponControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WeaponControl"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""91e8e9ea-beca-4d44-862c-5d69818b29a3"",
            ""actions"": [
                {
                    ""name"": ""SwitchToWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""1fb3ee06-49da-42f9-aebd-a411face783f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""916da14b-0c1a-4f23-b53a-7cadc592fcd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""fb2d7d6d-5706-47ae-bf33-487f17282146"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToWeapon4"",
                    ""type"": ""Button"",
                    ""id"": ""2d3a75d6-4476-4fd2-9506-9b5d7efeecbb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f86ca2f-ece7-452e-be76-b7e2c967944a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwitchToWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9163cf14-94d6-4c6e-90f5-a5b8ddd56f13"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwitchToWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3d522d4-e4ae-4498-86e4-aa4422669a31"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwitchToWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f1d9937-e5b5-4526-931c-42792973edff"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwitchToWeapon4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_SwitchToWeapon1 = m_Gameplay.FindAction("SwitchToWeapon1", throwIfNotFound: true);
        m_Gameplay_SwitchToWeapon2 = m_Gameplay.FindAction("SwitchToWeapon2", throwIfNotFound: true);
        m_Gameplay_SwitchToWeapon3 = m_Gameplay.FindAction("SwitchToWeapon3", throwIfNotFound: true);
        m_Gameplay_SwitchToWeapon4 = m_Gameplay.FindAction("SwitchToWeapon4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_SwitchToWeapon1;
    private readonly InputAction m_Gameplay_SwitchToWeapon2;
    private readonly InputAction m_Gameplay_SwitchToWeapon3;
    private readonly InputAction m_Gameplay_SwitchToWeapon4;
    public struct GameplayActions
    {
        private @WeaponControl m_Wrapper;
        public GameplayActions(@WeaponControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchToWeapon1 => m_Wrapper.m_Gameplay_SwitchToWeapon1;
        public InputAction @SwitchToWeapon2 => m_Wrapper.m_Gameplay_SwitchToWeapon2;
        public InputAction @SwitchToWeapon3 => m_Wrapper.m_Gameplay_SwitchToWeapon3;
        public InputAction @SwitchToWeapon4 => m_Wrapper.m_Gameplay_SwitchToWeapon4;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @SwitchToWeapon1.started += instance.OnSwitchToWeapon1;
            @SwitchToWeapon1.performed += instance.OnSwitchToWeapon1;
            @SwitchToWeapon1.canceled += instance.OnSwitchToWeapon1;
            @SwitchToWeapon2.started += instance.OnSwitchToWeapon2;
            @SwitchToWeapon2.performed += instance.OnSwitchToWeapon2;
            @SwitchToWeapon2.canceled += instance.OnSwitchToWeapon2;
            @SwitchToWeapon3.started += instance.OnSwitchToWeapon3;
            @SwitchToWeapon3.performed += instance.OnSwitchToWeapon3;
            @SwitchToWeapon3.canceled += instance.OnSwitchToWeapon3;
            @SwitchToWeapon4.started += instance.OnSwitchToWeapon4;
            @SwitchToWeapon4.performed += instance.OnSwitchToWeapon4;
            @SwitchToWeapon4.canceled += instance.OnSwitchToWeapon4;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @SwitchToWeapon1.started -= instance.OnSwitchToWeapon1;
            @SwitchToWeapon1.performed -= instance.OnSwitchToWeapon1;
            @SwitchToWeapon1.canceled -= instance.OnSwitchToWeapon1;
            @SwitchToWeapon2.started -= instance.OnSwitchToWeapon2;
            @SwitchToWeapon2.performed -= instance.OnSwitchToWeapon2;
            @SwitchToWeapon2.canceled -= instance.OnSwitchToWeapon2;
            @SwitchToWeapon3.started -= instance.OnSwitchToWeapon3;
            @SwitchToWeapon3.performed -= instance.OnSwitchToWeapon3;
            @SwitchToWeapon3.canceled -= instance.OnSwitchToWeapon3;
            @SwitchToWeapon4.started -= instance.OnSwitchToWeapon4;
            @SwitchToWeapon4.performed -= instance.OnSwitchToWeapon4;
            @SwitchToWeapon4.canceled -= instance.OnSwitchToWeapon4;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnSwitchToWeapon1(InputAction.CallbackContext context);
        void OnSwitchToWeapon2(InputAction.CallbackContext context);
        void OnSwitchToWeapon3(InputAction.CallbackContext context);
        void OnSwitchToWeapon4(InputAction.CallbackContext context);
    }
}
